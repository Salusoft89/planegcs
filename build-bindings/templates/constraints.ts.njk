export type oid = number;

interface Id {
    id: oid;
}

interface ObjectParam {
    o_id: oid;
    param: string;
}
{% for enum in enums %}
enum {{ enum.name | replace('::', '_') }} {
    {% for val in enum.values -%}
    {{ val.name }} = {{ val.value }},
    {% endfor %}
}
{% endfor -%}

{% for item in fn_constraints %}
export interface {{ item.constraint_name }} extends Id {
    type: '{{ item.constraint_type }}';
{%- for param in item.params_list -%}
    {% set optional = '?' if param.optional_value else '' -%}
    {% if param.type == 'double' and param.identifier[0] == '*' %}
    {{ param.identifier | replace('*', '') + optional}}: ObjectParam|number|string;
    {%- elif param.identifier == 'tagId' %} {# skip #}
    {%- elif param.type in ['double', 'int', 'unsigned double', 'unsigned int'] %}
    {{ param.identifier + optional }}: number;
    {%- elif param.type == 'bool' %}
    {{ param.identifier + optional }}: boolean;
    {%- elif param.is_enum %}
    {{ param.identifier + optional }}: {{ param.type | replace('::', '_') }};
    {%- else %} {# object (Line, Parabola, Point, ...) #}
    {{ param.identifier | replace('&', '') + optional }}_id: oid; // {{ param.type }}
    {%- endif %}
{%- endfor %}
}
{% endfor %}

export type Constraint = {% for item in fn_constraints %}{{ item.constraint_name }}{%- if not loop.last %} | {% endif %}{% endfor %};
export type ConstraintParam = {% for item in fn_constraints %}{{ item.constraint_name }}[keyof {{ item.constraint_name }}]{%- if not loop.last %} | {% endif %}{% endfor %};